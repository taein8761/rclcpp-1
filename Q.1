1. 문자열대신에정수값을0으로 초기화하고 1
씩증가시키면서퍼블리시하는패키지pub1-1를작성하시오.
토픽메시지인터페이스는std_msgs/msg/Int32을 사용할 것
pub1_1.cpp
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/int32.hpp"

class PublisherNode : public rclcpp::Node
{
public:
    PublisherNode() : Node("publisher_node")
    {
        // Publisher 생성, 10은 큐의 크기
        publisher_ = this->create_publisher<std_msgs::msg::Int32>("topic_pub1", 10);

        // 1초마다 퍼블리시하도록 설정
        timer_ = this->create_wall_timer(
            std::chrono::seconds(1),
            [this]() {
                auto message = std_msgs::msg::Int32();
                message.data = counter_;  // counter 값 증가시켜서 퍼블리시
                RCLCPP_INFO(this->get_logger(), "Publishing: '%d'", message.data);
                publisher_->publish(message);
                counter_++;  // 카운터 값 1씩 증가
            });
    }

private:
    rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr publisher_;
    rclcpp::TimerBase::SharedPtr timer_;
    int counter_ = 0;  // 초기값 설정
};

int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);  // ROS2 초기화
    rclcpp::spin(std::make_shared<PublisherNode>());  // PublisherNode 실행
    rclcpp::shutdown();  // 종료
    return 0;
}

CMakeLists.txt
cmake_minimum_required(VERSION 3.16)
project(pub1_1)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)

# 실행 파일 추가
add_executable(pub1_1 src/pub1_1.cpp)  # 실행 파일 이름을 pub1_1로 설정

# 타겟 링크
ament_target_dependencies(pub1_1 rclcpp std_msgs)

# 설치
install(TARGETS
  pub1_1  # 설치할 파일 이름도 pub1_1로 설정
  DESTINATION lib/${PROJECT_NAME})

ament_package()

